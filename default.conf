proxy_set_header Upgrade $http_upgrade;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

# Mitigate httpoxy attack
proxy_set_header Proxy "";

# Why aren't these supported on the official Nginx Docker image?
#proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
#proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
#proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

upstream rhea-api {
  server {{RHEA_API_ENDPOINT}};
}

server {
  listen 4200;
  listen [::]:4200;
  server_name rhea-ui;

  set $force_https {{FORCE_HTTPS}};

  # Initialize the HTTPS enforcement state.
  set $enforce_state "";

  # Is HTTPS enforcement enabled?
  if ($force_https = true) { set $enforce_state "force"; }

  # Is the scheme forwarded by a proxy?
  set $forward_scheme "fwd-none";
  if ($http_x_forwarded_proto = "http") { set $forward_scheme "fwd-http"; }
  if ($http_x_forwarded_proto = "https") { set $forward_scheme "fwd-https"; }
  set $enforce_state "$enforce_state:$forward_scheme";

  # What is the request's scheme?
  set $raw_scheme "raw-https";
  if ($scheme = "http") { set $raw_scheme "raw-http"; }
  set $enforce_state "$enforce_state:$raw_scheme";

  # Determine if we have a pattern which matches a HTTPS redirect requirement.
  set $do_https_redirect false;
  if ($enforce_state ~ "force:fwd-http:.*") { set $do_https_redirect true; }
  if ($enforce_state = "force:fwd-none:raw-http") { set $do_https_redirect true; }

  set $forwarding_host $http_host;
  if ($http_x_forwarded_host) {
    set $forwarding_host $http_x_forwarded_host;
  }

  # Redirect if required.
  if ($do_https_redirect = true) {
    return 301 https://$forwarding_host$request_uri;
  }

  # Reverse proxy to the REST API
  location /api/ {
    proxy_pass http://rhea-api/api/;

    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;

    # WebSocket support
    #proxy_set_header Upgrade $http_upgrade;
    #proxy_set_header Connection $connection_upgrade;

    # Customize connection timeouts
    #proxy_read_timeout 900s;
    #proxy_send_timeout 900s;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Xss-Protection "1; mode=block";
    add_header X-Content-Type-Options nosniff;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    proxy_http_version 1.1;
    expires off;
  }

  # All other paths should attempt to pull from the site content
  location / {
    alias /opt/site/;
    try_files $uri $uri/ /index.html;
    expires off;
    add_header Cache-Control private;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Xss-Protection "1; mode=block";
    add_header X-Content-Type-Options nosniff;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    sub_filter '//aaa-dev.truste-svc.net' '{{AAA_HOST}}';
    sub_filter_types 'application/json' 'application/javascript';
    sub_filter_once on;
  }

  error_page 413 @413_json;
  location @413_json {
      default_type application/json;
      return 413 '{"Error" : "File too large(>16MB)"}';
  }

}
